{"name":"Cachetool","tagline":"Manage your caches through the cli","body":"CacheTool - Manage cache in the CLI\r\n===================================\r\n\r\nCacheTool allows you to work with `apc` and `opcache` through the cli.\r\nIt will connect to a fastcgi server (like php-fpm) and operate it's cache.\r\n\r\nWhy is this useful?\r\n- Maybe you want to clear the bytecode cache without reloading php-fpm or using a web endpoint\r\n- Maybe you want to have a cron which deals with cache invalidation\r\n- Maybe you want to see some statistics right from the console\r\n- And many more...\r\n\r\nInstallation\r\n------------\r\n\r\n```sh\r\n$ curl -sO http://gordalina.github.io/cachetool/downloads/cachetool.phar\r\n$ chmod +x cachetool.phar\r\n```\r\n\r\nUsage (as an application)\r\n-------------------------\r\n\r\n1. You can connect to a fastcgi server through ip\r\n\r\n```sh\r\n$ php cachetool.phar apc:cache:info --fcgi=127.0.0.1:9000\r\n```\r\n\r\n2. Or by socket\r\n\r\n```sh\r\n$ php cachetool.phar opcache:status --fcgi=/var/run/php5-fpm.sock\r\n```\r\n\r\n3. You have some useful commands that you can you\r\n\r\n```sh\r\napc\r\n  apc:bin:dump             Get a binary dump of files and user variables\r\n  apc:bin:load             Load a binary dump into the APC file and user variables\r\n  apc:cache:clear          Clears APC cache (user, system or all)\r\n  apc:cache:info           Shows APC user & system cache information\r\n  apc:cache:info:file      Shows APC file cache information\r\n  apc:key:delete           Deletes an APC key\r\n  apc:key:exists           Checks if an APC key exists\r\n  apc:key:fetch            Shows the content of an APC key\r\n  apc:key:store            Store an APC key with given value\r\n  apc:sma:info             Show APC shared memory allocation information\r\nopcache\r\n  opcache:configuration    Get configuration information about the cache\r\n  opcache:reset            Resets the contents of the opcode cache\r\n  opcache:status           Show summary information about the opcode cache\r\n  opcache:status:scripts   Show scripts in the opcode cache\r\n```\r\n\r\nConfiguration File\r\n------------------\r\n\r\nYou can have a configuration file with the adapter configuration, allowing you to\r\ncall CacheTool withouth `--fcgi` or `--cli` option.\r\n\r\nThe file must be named `.cachetool.yml`. CacheTool will look for this file on the\r\ncurrent directory and in any parent directory until it finds one.\r\n\r\nAn example of what this file might look like is:\r\n\r\n1. Will connect to fastcgi at 127.0.0.1:9000\r\n\r\n```yml\r\nadapter: fastcgi\r\nfastcgi: 127.0.0.1:9000\r\n```\r\n\r\n2. Will connect to cli (disregarding fastcgi configuration)\r\n\r\n```yml\r\nadapter: cli\r\nfastcgi: /var/run/php5-fpm.sock\r\n```\r\n\r\nUsage (as a library)\r\n--------------------\r\n\r\n1. Add it as a dependency\r\n\r\n```sh\r\n$ composer require gordalina/cachetool=~1.0\r\n```\r\n\r\n2. Create instance\r\n\r\n```php\r\nuse CacheTool\\Adapter\\FastCGI;\r\nuse CacheTool\\CacheTool;\r\n\r\n$adapter = new FastCGI('127.0.0.1:9000');\r\n$cache = CacheTool::factory($adapter);\r\n```\r\n\r\n3. You can use `apc` and `opcache` functions\r\n\r\n```php\r\n$cache->apc_clear_cache('both');\r\n$cache->opcache_reset();\r\n```\r\n\r\nProxies\r\n-------\r\n\r\nCacheTool depends on `Proxies` to provide functionality, by default when creating a CacheTool instance from the factory\r\nall proxies are enabled [`ApcProxy`](https://github.com/gordalina/cachetool/blob/master/src/CacheTool/Proxy/ApcProxy.php), [`OpcacheProxy`](https://github.com/gordalina/cachetool/blob/master/src/CacheTool/Proxy/OpcacheProxy.php) and [`PhpProxy`](https://github.com/gordalina/cachetool/blob/master/src/CacheTool/Proxy/PhpProxy.php), you can customize it or extend to your will like the example below:\r\n\r\n```php\r\nuse CacheTool\\Adapter\\FastCGI;\r\nuse CacheTool\\CacheTool;\r\nuse CacheTool\\Proxy;\r\n\r\n$adapter = new FastCGI('/var/run/php5-fpm.sock');\r\n$cache = new CacheTool();\r\n$cache->setAdapter($adapter);\r\n$cache->addProxy(new Proxy\\ApcProxy());\r\n$cache->addProxy(new Proxy\\PhpProxy());\r\n```\r\n\r\nUpdating CacheTool\r\n------------------\r\n\r\nRunning `php cachetool.phar self-update` will update a phar install with the latest version.\r\n\r\nRequirements\r\n------------\r\n\r\nPHP 5.3.3\r\n\r\nLicense\r\n-------\r\n\r\nCacheTool is licensed under the MIT License - see the [LICENSE]() for details\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}